/*
Asset Components

An Asset Component is an internal part of an Asset which is defined by the Hierarchy API.  Currently the following components are supported, * Bearings * Shafts

API version: 0.1
Contact: team.gob@enlight.skf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// SpeedConfiguration - struct for SpeedConfiguration
type SpeedConfiguration struct {
	FixedSpeedConfiguration *FixedSpeedConfiguration
	VariableSpeedConfiguration *VariableSpeedConfiguration
}

// FixedSpeedConfigurationAsSpeedConfiguration is a convenience function that returns FixedSpeedConfiguration wrapped in SpeedConfiguration
func FixedSpeedConfigurationAsSpeedConfiguration(v *FixedSpeedConfiguration) SpeedConfiguration {
	return SpeedConfiguration{
		FixedSpeedConfiguration: v,
	}
}

// VariableSpeedConfigurationAsSpeedConfiguration is a convenience function that returns VariableSpeedConfiguration wrapped in SpeedConfiguration
func VariableSpeedConfigurationAsSpeedConfiguration(v *VariableSpeedConfiguration) SpeedConfiguration {
	return SpeedConfiguration{
		VariableSpeedConfiguration: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *SpeedConfiguration) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FixedSpeedConfiguration
	err = newStrictDecoder(data).Decode(&dst.FixedSpeedConfiguration)
	if err == nil {
		jsonFixedSpeedConfiguration, _ := json.Marshal(dst.FixedSpeedConfiguration)
		if string(jsonFixedSpeedConfiguration) == "{}" { // empty struct
			dst.FixedSpeedConfiguration = nil
		} else {
			match++
		}
	} else {
		dst.FixedSpeedConfiguration = nil
	}

	// try to unmarshal data into VariableSpeedConfiguration
	err = newStrictDecoder(data).Decode(&dst.VariableSpeedConfiguration)
	if err == nil {
		jsonVariableSpeedConfiguration, _ := json.Marshal(dst.VariableSpeedConfiguration)
		if string(jsonVariableSpeedConfiguration) == "{}" { // empty struct
			dst.VariableSpeedConfiguration = nil
		} else {
			match++
		}
	} else {
		dst.VariableSpeedConfiguration = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FixedSpeedConfiguration = nil
		dst.VariableSpeedConfiguration = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(SpeedConfiguration)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(SpeedConfiguration)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src SpeedConfiguration) MarshalJSON() ([]byte, error) {
	if src.FixedSpeedConfiguration != nil {
		return json.Marshal(&src.FixedSpeedConfiguration)
	}

	if src.VariableSpeedConfiguration != nil {
		return json.Marshal(&src.VariableSpeedConfiguration)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *SpeedConfiguration) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FixedSpeedConfiguration != nil {
		return obj.FixedSpeedConfiguration
	}

	if obj.VariableSpeedConfiguration != nil {
		return obj.VariableSpeedConfiguration
	}

	// all schemas are nil
	return nil
}

type NullableSpeedConfiguration struct {
	value *SpeedConfiguration
	isSet bool
}

func (v NullableSpeedConfiguration) Get() *SpeedConfiguration {
	return v.value
}

func (v *NullableSpeedConfiguration) Set(val *SpeedConfiguration) {
	v.value = val
	v.isSet = true
}

func (v NullableSpeedConfiguration) IsSet() bool {
	return v.isSet
}

func (v *NullableSpeedConfiguration) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSpeedConfiguration(val *SpeedConfiguration) *NullableSpeedConfiguration {
	return &NullableSpeedConfiguration{value: val, isSet: true}
}

func (v NullableSpeedConfiguration) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSpeedConfiguration) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


