/*
Asset Components

An Asset Component is an internal part of an Asset which is defined by the Hierarchy API.  Currently the following components are supported, * Bearings * Shafts

API version: 0.1
Contact: team.gob@enlight.skf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// CalculatedSpeed - struct for CalculatedSpeed
type CalculatedSpeed struct {
	FixedSpeed *FixedSpeed
	UnknownSpeed *UnknownSpeed
	VariableSpeed *VariableSpeed
}

// FixedSpeedAsCalculatedSpeed is a convenience function that returns FixedSpeed wrapped in CalculatedSpeed
func FixedSpeedAsCalculatedSpeed(v *FixedSpeed) CalculatedSpeed {
	return CalculatedSpeed{
		FixedSpeed: v,
	}
}

// UnknownSpeedAsCalculatedSpeed is a convenience function that returns UnknownSpeed wrapped in CalculatedSpeed
func UnknownSpeedAsCalculatedSpeed(v *UnknownSpeed) CalculatedSpeed {
	return CalculatedSpeed{
		UnknownSpeed: v,
	}
}

// VariableSpeedAsCalculatedSpeed is a convenience function that returns VariableSpeed wrapped in CalculatedSpeed
func VariableSpeedAsCalculatedSpeed(v *VariableSpeed) CalculatedSpeed {
	return CalculatedSpeed{
		VariableSpeed: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *CalculatedSpeed) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FixedSpeed
	err = newStrictDecoder(data).Decode(&dst.FixedSpeed)
	if err == nil {
		jsonFixedSpeed, _ := json.Marshal(dst.FixedSpeed)
		if string(jsonFixedSpeed) == "{}" { // empty struct
			dst.FixedSpeed = nil
		} else {
			match++
		}
	} else {
		dst.FixedSpeed = nil
	}

	// try to unmarshal data into UnknownSpeed
	err = newStrictDecoder(data).Decode(&dst.UnknownSpeed)
	if err == nil {
		jsonUnknownSpeed, _ := json.Marshal(dst.UnknownSpeed)
		if string(jsonUnknownSpeed) == "{}" { // empty struct
			dst.UnknownSpeed = nil
		} else {
			match++
		}
	} else {
		dst.UnknownSpeed = nil
	}

	// try to unmarshal data into VariableSpeed
	err = newStrictDecoder(data).Decode(&dst.VariableSpeed)
	if err == nil {
		jsonVariableSpeed, _ := json.Marshal(dst.VariableSpeed)
		if string(jsonVariableSpeed) == "{}" { // empty struct
			dst.VariableSpeed = nil
		} else {
			match++
		}
	} else {
		dst.VariableSpeed = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FixedSpeed = nil
		dst.UnknownSpeed = nil
		dst.VariableSpeed = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(CalculatedSpeed)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(CalculatedSpeed)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CalculatedSpeed) MarshalJSON() ([]byte, error) {
	if src.FixedSpeed != nil {
		return json.Marshal(&src.FixedSpeed)
	}

	if src.UnknownSpeed != nil {
		return json.Marshal(&src.UnknownSpeed)
	}

	if src.VariableSpeed != nil {
		return json.Marshal(&src.VariableSpeed)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CalculatedSpeed) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.FixedSpeed != nil {
		return obj.FixedSpeed
	}

	if obj.UnknownSpeed != nil {
		return obj.UnknownSpeed
	}

	if obj.VariableSpeed != nil {
		return obj.VariableSpeed
	}

	// all schemas are nil
	return nil
}

type NullableCalculatedSpeed struct {
	value *CalculatedSpeed
	isSet bool
}

func (v NullableCalculatedSpeed) Get() *CalculatedSpeed {
	return v.value
}

func (v *NullableCalculatedSpeed) Set(val *CalculatedSpeed) {
	v.value = val
	v.isSet = true
}

func (v NullableCalculatedSpeed) IsSet() bool {
	return v.isSet
}

func (v *NullableCalculatedSpeed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCalculatedSpeed(val *CalculatedSpeed) *NullableCalculatedSpeed {
	return &NullableCalculatedSpeed{value: val, isSet: true}
}

func (v NullableCalculatedSpeed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCalculatedSpeed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


