/*
Asset Components

An Asset Component is an internal part of an Asset which is defined by the Hierarchy API.  Currently the following components are supported, * Bearings * Shafts

API version: 0.1
Contact: team.gob@enlight.skf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
	"fmt"
)

// RelationSource the model 'RelationSource'
type RelationSource string

// List of RelationSource
const (
	HIERARCHY RelationSource = "hierarchy"
)

// All allowed values of RelationSource enum
var AllowedRelationSourceEnumValues = []RelationSource{
	"hierarchy",
}

func (v *RelationSource) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := RelationSource(value)
	for _, existing := range AllowedRelationSourceEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid RelationSource", value)
}

// NewRelationSourceFromValue returns a pointer to a valid RelationSource
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewRelationSourceFromValue(v string) (*RelationSource, error) {
	ev := RelationSource(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for RelationSource: valid values are %v", v, AllowedRelationSourceEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v RelationSource) IsValid() bool {
	for _, existing := range AllowedRelationSourceEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to RelationSource value
func (v RelationSource) Ptr() *RelationSource {
	return &v
}

type NullableRelationSource struct {
	value *RelationSource
	isSet bool
}

func (v NullableRelationSource) Get() *RelationSource {
	return v.value
}

func (v *NullableRelationSource) Set(val *RelationSource) {
	v.value = val
	v.isSet = true
}

func (v NullableRelationSource) IsSet() bool {
	return v.isSet
}

func (v *NullableRelationSource) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelationSource(val *RelationSource) *NullableRelationSource {
	return &NullableRelationSource{value: val, isSet: true}
}

func (v NullableRelationSource) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelationSource) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

