/*
Asset Components

An Asset Component is an internal part of an Asset which is defined by the Hierarchy API.  Currently the following components are supported, * Bearings * Shafts

API version: 0.1
Contact: team.gob@enlight.skf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// ProblemResponse struct for ProblemResponse
type ProblemResponse struct {
	Type string `json:"type"`
	Title string `json:"title"`
	Status int32 `json:"status"`
	Detail string `json:"detail"`
	CorrelationId string `json:"correlationId"`
}

// NewProblemResponse instantiates a new ProblemResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblemResponse(type_ string, title string, status int32, detail string, correlationId string) *ProblemResponse {
	this := ProblemResponse{}
	this.Type = type_
	this.Title = title
	this.Status = status
	this.Detail = detail
	this.CorrelationId = correlationId
	return &this
}

// NewProblemResponseWithDefaults instantiates a new ProblemResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemResponseWithDefaults() *ProblemResponse {
	this := ProblemResponse{}
	return &this
}

// GetType returns the Type field value
func (o *ProblemResponse) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProblemResponse) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProblemResponse) SetType(v string) {
	o.Type = v
}

// GetTitle returns the Title field value
func (o *ProblemResponse) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ProblemResponse) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ProblemResponse) SetTitle(v string) {
	o.Title = v
}

// GetStatus returns the Status field value
func (o *ProblemResponse) GetStatus() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ProblemResponse) GetStatusOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ProblemResponse) SetStatus(v int32) {
	o.Status = v
}

// GetDetail returns the Detail field value
func (o *ProblemResponse) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *ProblemResponse) GetDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *ProblemResponse) SetDetail(v string) {
	o.Detail = v
}

// GetCorrelationId returns the CorrelationId field value
func (o *ProblemResponse) GetCorrelationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CorrelationId
}

// GetCorrelationIdOk returns a tuple with the CorrelationId field value
// and a boolean to check if the value has been set.
func (o *ProblemResponse) GetCorrelationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CorrelationId, true
}

// SetCorrelationId sets field value
func (o *ProblemResponse) SetCorrelationId(v string) {
	o.CorrelationId = v
}

func (o ProblemResponse) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["title"] = o.Title
	}
	if true {
		toSerialize["status"] = o.Status
	}
	if true {
		toSerialize["detail"] = o.Detail
	}
	if true {
		toSerialize["correlationId"] = o.CorrelationId
	}
	return json.Marshal(toSerialize)
}

type NullableProblemResponse struct {
	value *ProblemResponse
	isSet bool
}

func (v NullableProblemResponse) Get() *ProblemResponse {
	return v.value
}

func (v *NullableProblemResponse) Set(val *ProblemResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableProblemResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableProblemResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblemResponse(val *ProblemResponse) *NullableProblemResponse {
	return &NullableProblemResponse{value: val, isSet: true}
}

func (v NullableProblemResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblemResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


