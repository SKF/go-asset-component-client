/*
Asset Components

An Asset Component is an internal part of an Asset which is defined by the Hierarchy API.  Currently the following components are supported, * Bearings * Shafts

API version: 0.1
Contact: team.gob@enlight.skf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// Origin An external identifier indicating that this component was imported from another system
type Origin struct {
	// The external identifier of the resource
	Id string `json:"id"`
	// The type of the provided `provider` value
	Type string `json:"type"`
	// An identifier for the provider of the origin, usually the integration identifier
	Provider string `json:"provider"`
}

// NewOrigin instantiates a new Origin object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrigin(id string, type_ string, provider string) *Origin {
	this := Origin{}
	this.Id = id
	this.Type = type_
	this.Provider = provider
	return &this
}

// NewOriginWithDefaults instantiates a new Origin object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOriginWithDefaults() *Origin {
	this := Origin{}
	return &this
}

// GetId returns the Id field value
func (o *Origin) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *Origin) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *Origin) SetId(v string) {
	o.Id = v
}

// GetType returns the Type field value
func (o *Origin) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *Origin) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *Origin) SetType(v string) {
	o.Type = v
}

// GetProvider returns the Provider field value
func (o *Origin) GetProvider() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Provider
}

// GetProviderOk returns a tuple with the Provider field value
// and a boolean to check if the value has been set.
func (o *Origin) GetProviderOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Provider, true
}

// SetProvider sets field value
func (o *Origin) SetProvider(v string) {
	o.Provider = v
}

func (o Origin) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["provider"] = o.Provider
	}
	return json.Marshal(toSerialize)
}

type NullableOrigin struct {
	value *Origin
	isSet bool
}

func (v NullableOrigin) Get() *Origin {
	return v.value
}

func (v *NullableOrigin) Set(val *Origin) {
	v.value = val
	v.isSet = true
}

func (v NullableOrigin) IsSet() bool {
	return v.isSet
}

func (v *NullableOrigin) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrigin(val *Origin) *NullableOrigin {
	return &NullableOrigin{value: val, isSet: true}
}

func (v NullableOrigin) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrigin) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


