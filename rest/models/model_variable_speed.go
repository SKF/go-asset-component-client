/*
Asset Components

An Asset Component is an internal part of an Asset which is defined by the Hierarchy API.  Currently the following components are supported, * Bearings * Shafts

API version: 0.1
Contact: team.gob@enlight.skf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// VariableSpeed struct for VariableSpeed
type VariableSpeed struct {
	Type string `json:"type"`
	Unit string `json:"unit"`
	Min float64 `json:"min"`
	Max float64 `json:"max"`
	Nominal *float64 `json:"nominal,omitempty"`
}

// NewVariableSpeed instantiates a new VariableSpeed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableSpeed(type_ string, unit string, min float64, max float64) *VariableSpeed {
	this := VariableSpeed{}
	this.Type = type_
	this.Unit = unit
	this.Min = min
	this.Max = max
	return &this
}

// NewVariableSpeedWithDefaults instantiates a new VariableSpeed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableSpeedWithDefaults() *VariableSpeed {
	this := VariableSpeed{}
	return &this
}

// GetType returns the Type field value
func (o *VariableSpeed) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VariableSpeed) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VariableSpeed) SetType(v string) {
	o.Type = v
}

// GetUnit returns the Unit field value
func (o *VariableSpeed) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *VariableSpeed) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *VariableSpeed) SetUnit(v string) {
	o.Unit = v
}

// GetMin returns the Min field value
func (o *VariableSpeed) GetMin() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Min
}

// GetMinOk returns a tuple with the Min field value
// and a boolean to check if the value has been set.
func (o *VariableSpeed) GetMinOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Min, true
}

// SetMin sets field value
func (o *VariableSpeed) SetMin(v float64) {
	o.Min = v
}

// GetMax returns the Max field value
func (o *VariableSpeed) GetMax() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.Max
}

// GetMaxOk returns a tuple with the Max field value
// and a boolean to check if the value has been set.
func (o *VariableSpeed) GetMaxOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Max, true
}

// SetMax sets field value
func (o *VariableSpeed) SetMax(v float64) {
	o.Max = v
}

// GetNominal returns the Nominal field value if set, zero value otherwise.
func (o *VariableSpeed) GetNominal() float64 {
	if o == nil || o.Nominal == nil {
		var ret float64
		return ret
	}
	return *o.Nominal
}

// GetNominalOk returns a tuple with the Nominal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VariableSpeed) GetNominalOk() (*float64, bool) {
	if o == nil || o.Nominal == nil {
		return nil, false
	}
	return o.Nominal, true
}

// HasNominal returns a boolean if a field has been set.
func (o *VariableSpeed) HasNominal() bool {
	if o != nil && o.Nominal != nil {
		return true
	}

	return false
}

// SetNominal gets a reference to the given float64 and assigns it to the Nominal field.
func (o *VariableSpeed) SetNominal(v float64) {
	o.Nominal = &v
}

func (o VariableSpeed) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["unit"] = o.Unit
	}
	if true {
		toSerialize["min"] = o.Min
	}
	if true {
		toSerialize["max"] = o.Max
	}
	if o.Nominal != nil {
		toSerialize["nominal"] = o.Nominal
	}
	return json.Marshal(toSerialize)
}

type NullableVariableSpeed struct {
	value *VariableSpeed
	isSet bool
}

func (v NullableVariableSpeed) Get() *VariableSpeed {
	return v.value
}

func (v *NullableVariableSpeed) Set(val *VariableSpeed) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableSpeed) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableSpeed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableSpeed(val *VariableSpeed) *NullableVariableSpeed {
	return &NullableVariableSpeed{value: val, isSet: true}
}

func (v NullableVariableSpeed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableSpeed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


