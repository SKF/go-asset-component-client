/*
Asset Components

An Asset Component is an internal part of an Asset which is defined by the Hierarchy API.  Currently the following components are supported, * Bearings * Shafts

API version: 0.1
Contact: team.gob@enlight.skf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// VariableSpeed struct for VariableSpeed
type VariableSpeed struct {
	Type string `json:"type"`
	Unit string `json:"unit"`
	MaxValue float64 `json:"maxValue"`
	MinValue float64 `json:"minValue"`
}

// NewVariableSpeed instantiates a new VariableSpeed object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVariableSpeed(type_ string, unit string, maxValue float64, minValue float64) *VariableSpeed {
	this := VariableSpeed{}
	this.Type = type_
	this.Unit = unit
	this.MaxValue = maxValue
	this.MinValue = minValue
	return &this
}

// NewVariableSpeedWithDefaults instantiates a new VariableSpeed object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVariableSpeedWithDefaults() *VariableSpeed {
	this := VariableSpeed{}
	return &this
}

// GetType returns the Type field value
func (o *VariableSpeed) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *VariableSpeed) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *VariableSpeed) SetType(v string) {
	o.Type = v
}

// GetUnit returns the Unit field value
func (o *VariableSpeed) GetUnit() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Unit
}

// GetUnitOk returns a tuple with the Unit field value
// and a boolean to check if the value has been set.
func (o *VariableSpeed) GetUnitOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Unit, true
}

// SetUnit sets field value
func (o *VariableSpeed) SetUnit(v string) {
	o.Unit = v
}

// GetMaxValue returns the MaxValue field value
func (o *VariableSpeed) GetMaxValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.MaxValue
}

// GetMaxValueOk returns a tuple with the MaxValue field value
// and a boolean to check if the value has been set.
func (o *VariableSpeed) GetMaxValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MaxValue, true
}

// SetMaxValue sets field value
func (o *VariableSpeed) SetMaxValue(v float64) {
	o.MaxValue = v
}

// GetMinValue returns the MinValue field value
func (o *VariableSpeed) GetMinValue() float64 {
	if o == nil {
		var ret float64
		return ret
	}

	return o.MinValue
}

// GetMinValueOk returns a tuple with the MinValue field value
// and a boolean to check if the value has been set.
func (o *VariableSpeed) GetMinValueOk() (*float64, bool) {
	if o == nil {
		return nil, false
	}
	return &o.MinValue, true
}

// SetMinValue sets field value
func (o *VariableSpeed) SetMinValue(v float64) {
	o.MinValue = v
}

func (o VariableSpeed) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["type"] = o.Type
	}
	if true {
		toSerialize["unit"] = o.Unit
	}
	if true {
		toSerialize["maxValue"] = o.MaxValue
	}
	if true {
		toSerialize["minValue"] = o.MinValue
	}
	return json.Marshal(toSerialize)
}

type NullableVariableSpeed struct {
	value *VariableSpeed
	isSet bool
}

func (v NullableVariableSpeed) Get() *VariableSpeed {
	return v.value
}

func (v *NullableVariableSpeed) Set(val *VariableSpeed) {
	v.value = val
	v.isSet = true
}

func (v NullableVariableSpeed) IsSet() bool {
	return v.isSet
}

func (v *NullableVariableSpeed) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVariableSpeed(val *VariableSpeed) *NullableVariableSpeed {
	return &NullableVariableSpeed{value: val, isSet: true}
}

func (v NullableVariableSpeed) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVariableSpeed) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


