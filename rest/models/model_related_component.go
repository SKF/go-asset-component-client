/*
Asset Components

An Asset Component is an internal part of an Asset which is defined by the Hierarchy API.  Currently the following components are supported, * Bearings * Shafts

API version: 0.1
Contact: team.gob@enlight.skf.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package models

import (
	"encoding/json"
)

// RelatedComponent struct for RelatedComponent
type RelatedComponent struct {
	// ComponentID
	Id string `json:"id"`
}

// NewRelatedComponent instantiates a new RelatedComponent object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelatedComponent(id string) *RelatedComponent {
	this := RelatedComponent{}
	this.Id = id
	return &this
}

// NewRelatedComponentWithDefaults instantiates a new RelatedComponent object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelatedComponentWithDefaults() *RelatedComponent {
	this := RelatedComponent{}
	return &this
}

// GetId returns the Id field value
func (o *RelatedComponent) GetId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Id
}

// GetIdOk returns a tuple with the Id field value
// and a boolean to check if the value has been set.
func (o *RelatedComponent) GetIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Id, true
}

// SetId sets field value
func (o *RelatedComponent) SetId(v string) {
	o.Id = v
}

func (o RelatedComponent) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["id"] = o.Id
	}
	return json.Marshal(toSerialize)
}

type NullableRelatedComponent struct {
	value *RelatedComponent
	isSet bool
}

func (v NullableRelatedComponent) Get() *RelatedComponent {
	return v.value
}

func (v *NullableRelatedComponent) Set(val *RelatedComponent) {
	v.value = val
	v.isSet = true
}

func (v NullableRelatedComponent) IsSet() bool {
	return v.isSet
}

func (v *NullableRelatedComponent) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelatedComponent(val *RelatedComponent) *NullableRelatedComponent {
	return &NullableRelatedComponent{value: val, isSet: true}
}

func (v NullableRelatedComponent) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelatedComponent) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


